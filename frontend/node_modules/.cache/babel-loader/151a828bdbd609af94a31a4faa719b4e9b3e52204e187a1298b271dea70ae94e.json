{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prabhanshu Kumar Jha\\\\Desktop\\\\Code\\\\Hardhat\\\\my-hardhat-project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// Replace with your values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0xYourContractAddress\";\nconst CONTRACT_ABI = [/* Paste your ABI here */];\nconst PINATA_JWT = \"Bearer YOUR_PINATA_JWT\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [account, setAccount] = useState('');\n  const [status, setStatus] = useState('');\n  const [provider, setProvider] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [videoHash, setVideoHash] = useState('');\n  const [uploadTx, setUploadTx] = useState('');\n\n  // Connect wallet\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      const _provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = _provider.getSigner();\n      const address = await signer.getAddress();\n      setProvider(_provider);\n      setContract(new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer));\n      setAccount(address);\n    } else {\n      alert(\"MetaMask not detected\");\n    }\n  };\n\n  // Upload file to Pinata\n  const uploadToPinata = async () => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const metadata = JSON.stringify({\n      name: file.name\n    });\n    formData.append(\"pinataMetadata\", metadata);\n    const res = await axios.post(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", formData, {\n      maxBodyLength: \"Infinity\",\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,\n        Authorization: PINATA_JWT\n      }\n    });\n    return res.data.IpfsHash;\n  };\n\n  // Upload file and store metadata on blockchain\n  const handleUpload = async () => {\n    setStatus('Uploading to IPFS...');\n    try {\n      const hash = await uploadToPinata();\n      setVideoHash(hash);\n      setStatus('Uploading to blockchain...');\n\n      // Replace with real hashes or AI results\n      const tx = await contract.uploadFile(hash, \"sample-phash\", \"sample-dctHash\", \"sample-histHash\", \"sample-aiFeaturesHash\", false);\n      setStatus('Waiting for transaction...');\n      await tx.wait();\n      setUploadTx(tx.hash);\n      setStatus('Upload successful!');\n    } catch (err) {\n      console.error(err);\n      setStatus('Upload failed: ' + err.message);\n    }\n  };\n\n  // Request permission to reuse\n  const handlePermissionRequest = async () => {\n    if (!videoHash) return alert(\"Upload something first!\");\n    setStatus(\"Requesting permission...\");\n    try {\n      const tx = await contract.requestPermission(videoHash);\n      await tx.wait();\n      setStatus(\"Permission request sent!\");\n    } catch (err) {\n      console.error(err);\n      setStatus(\"Request failed.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mb-4\",\n      children: \"\\uD83E\\uDDE0 Decentralized Deepfake Upload Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mb-3\",\n      onClick: connectWallet,\n      children: account ? `Connected: ${account.slice(0, 6)}...` : \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control mb-3\",\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-success mb-2\",\n      onClick: handleUpload,\n      disabled: !file,\n      children: \"Upload & Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-warning mb-3 ms-2\",\n      onClick: handlePermissionRequest,\n      disabled: !videoHash,\n      children: \"Request Permission for Last Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), uploadTx && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success\",\n      children: [\"\\u2705 Transaction: \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://sepolia.etherscan.io/tx/${uploadTx}`,\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        children: \"View on Etherscan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YCu7qPEgOexpYCdiYtnTHX13wGY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","axios","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","CONTRACT_ABI","PINATA_JWT","App","_s","file","setFile","account","setAccount","status","setStatus","provider","setProvider","contract","setContract","videoHash","setVideoHash","uploadTx","setUploadTx","connectWallet","window","ethereum","_provider","providers","Web3Provider","signer","getSigner","address","getAddress","Contract","alert","uploadToPinata","formData","FormData","append","metadata","JSON","stringify","name","res","post","maxBodyLength","headers","_boundary","Authorization","data","IpfsHash","handleUpload","hash","tx","uploadFile","wait","err","console","error","message","handlePermissionRequest","requestPermission","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","slice","type","onChange","e","target","files","disabled","href","rel","_c","$RefreshReg$"],"sources":["C:/Users/Prabhanshu Kumar Jha/Desktop/Code/Hardhat/my-hardhat-project/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// Replace with your values\nconst CONTRACT_ADDRESS = \"0xYourContractAddress\";\nconst CONTRACT_ABI = [ /* Paste your ABI here */ ];\nconst PINATA_JWT = \"Bearer YOUR_PINATA_JWT\";\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [account, setAccount] = useState('');\n  const [status, setStatus] = useState('');\n  const [provider, setProvider] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [videoHash, setVideoHash] = useState('');\n  const [uploadTx, setUploadTx] = useState('');\n\n  // Connect wallet\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      const _provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = _provider.getSigner();\n      const address = await signer.getAddress();\n\n      setProvider(_provider);\n      setContract(new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer));\n      setAccount(address);\n    } else {\n      alert(\"MetaMask not detected\");\n    }\n  };\n\n  // Upload file to Pinata\n  const uploadToPinata = async () => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    const metadata = JSON.stringify({\n      name: file.name,\n    });\n    formData.append(\"pinataMetadata\", metadata);\n\n    const res = await axios.post(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", formData, {\n      maxBodyLength: \"Infinity\",\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,\n        Authorization: PINATA_JWT\n      }\n    });\n\n    return res.data.IpfsHash;\n  };\n\n  // Upload file and store metadata on blockchain\n  const handleUpload = async () => {\n    setStatus('Uploading to IPFS...');\n    try {\n      const hash = await uploadToPinata();\n      setVideoHash(hash);\n      setStatus('Uploading to blockchain...');\n\n      // Replace with real hashes or AI results\n      const tx = await contract.uploadFile(\n        hash,\n        \"sample-phash\",\n        \"sample-dctHash\",\n        \"sample-histHash\",\n        \"sample-aiFeaturesHash\",\n        false\n      );\n\n      setStatus('Waiting for transaction...');\n      await tx.wait();\n\n      setUploadTx(tx.hash);\n      setStatus('Upload successful!');\n    } catch (err) {\n      console.error(err);\n      setStatus('Upload failed: ' + err.message);\n    }\n  };\n\n  // Request permission to reuse\n  const handlePermissionRequest = async () => {\n    if (!videoHash) return alert(\"Upload something first!\");\n    setStatus(\"Requesting permission...\");\n\n    try {\n      const tx = await contract.requestPermission(videoHash);\n      await tx.wait();\n      setStatus(\"Permission request sent!\");\n    } catch (err) {\n      console.error(err);\n      setStatus(\"Request failed.\");\n    }\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h2 className=\"mb-4\">ðŸ§  Decentralized Deepfake Upload Manager</h2>\n\n      <button className=\"btn btn-primary mb-3\" onClick={connectWallet}>\n        {account ? `Connected: ${account.slice(0, 6)}...` : \"Connect Wallet\"}\n      </button>\n\n      <input className=\"form-control mb-3\" type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n      \n      <button className=\"btn btn-success mb-2\" onClick={handleUpload} disabled={!file}>\n        Upload & Register\n      </button>\n\n      <button className=\"btn btn-warning mb-3 ms-2\" onClick={handlePermissionRequest} disabled={!videoHash}>\n        Request Permission for Last Upload\n      </button>\n\n      <div className=\"alert alert-info\">{status}</div>\n\n      {uploadTx && (\n        <div className=\"alert alert-success\">\n          âœ… Transaction: <a href={`https://sepolia.etherscan.io/tx/${uploadTx}`} target=\"_blank\" rel=\"noreferrer\">\n            View on Etherscan\n          </a>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,sCAAsC;AAC7C,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAAgB,GAAG,uBAAuB;AAChD,MAAMC,YAAY,GAAG,CAAE,0BAA2B;AAClD,MAAMC,UAAU,GAAG,wBAAwB;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMyB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnB,MAAMC,SAAS,GAAG,IAAI1B,MAAM,CAAC2B,SAAS,CAACC,YAAY,CAACJ,MAAM,CAACC,QAAQ,CAAC;MACpE,MAAMI,MAAM,GAAGH,SAAS,CAACI,SAAS,CAAC,CAAC;MACpC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;MAEzChB,WAAW,CAACU,SAAS,CAAC;MACtBR,WAAW,CAAC,IAAIlB,MAAM,CAACiC,QAAQ,CAAC7B,gBAAgB,EAAEC,YAAY,EAAEwB,MAAM,CAAC,CAAC;MACxEjB,UAAU,CAACmB,OAAO,CAAC;IACrB,CAAC,MAAM;MACLG,KAAK,CAAC,uBAAuB,CAAC;IAChC;EACF,CAAC;;EAED;EACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE7B,IAAI,CAAC;IAE7B,MAAM8B,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC;MAC9BC,IAAI,EAAEjC,IAAI,CAACiC;IACb,CAAC,CAAC;IACFN,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEC,QAAQ,CAAC;IAE3C,MAAMI,GAAG,GAAG,MAAM1C,KAAK,CAAC2C,IAAI,CAAC,gDAAgD,EAAER,QAAQ,EAAE;MACvFS,aAAa,EAAE,UAAU;MACzBC,OAAO,EAAE;QACP,cAAc,EAAE,iCAAiCV,QAAQ,CAACW,SAAS,EAAE;QACrEC,aAAa,EAAE1C;MACjB;IACF,CAAC,CAAC;IAEF,OAAOqC,GAAG,CAACM,IAAI,CAACC,QAAQ;EAC1B,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BrC,SAAS,CAAC,sBAAsB,CAAC;IACjC,IAAI;MACF,MAAMsC,IAAI,GAAG,MAAMjB,cAAc,CAAC,CAAC;MACnCf,YAAY,CAACgC,IAAI,CAAC;MAClBtC,SAAS,CAAC,4BAA4B,CAAC;;MAEvC;MACA,MAAMuC,EAAE,GAAG,MAAMpC,QAAQ,CAACqC,UAAU,CAClCF,IAAI,EACJ,cAAc,EACd,gBAAgB,EAChB,iBAAiB,EACjB,uBAAuB,EACvB,KACF,CAAC;MAEDtC,SAAS,CAAC,4BAA4B,CAAC;MACvC,MAAMuC,EAAE,CAACE,IAAI,CAAC,CAAC;MAEfjC,WAAW,CAAC+B,EAAE,CAACD,IAAI,CAAC;MACpBtC,SAAS,CAAC,oBAAoB,CAAC;IACjC,CAAC,CAAC,OAAO0C,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB1C,SAAS,CAAC,iBAAiB,GAAG0C,GAAG,CAACG,OAAO,CAAC;IAC5C;EACF,CAAC;;EAED;EACA,MAAMC,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAI,CAACzC,SAAS,EAAE,OAAOe,KAAK,CAAC,yBAAyB,CAAC;IACvDpB,SAAS,CAAC,0BAA0B,CAAC;IAErC,IAAI;MACF,MAAMuC,EAAE,GAAG,MAAMpC,QAAQ,CAAC4C,iBAAiB,CAAC1C,SAAS,CAAC;MACtD,MAAMkC,EAAE,CAACE,IAAI,CAAC,CAAC;MACfzC,SAAS,CAAC,0BAA0B,CAAC;IACvC,CAAC,CAAC,OAAO0C,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB1C,SAAS,CAAC,iBAAiB,CAAC;IAC9B;EACF,CAAC;EAED,oBACEX,OAAA;IAAK2D,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B5D,OAAA;MAAI2D,SAAS,EAAC,MAAM;MAAAC,QAAA,EAAC;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAElEhE,OAAA;MAAQ2D,SAAS,EAAC,sBAAsB;MAACM,OAAO,EAAE7C,aAAc;MAAAwC,QAAA,EAC7DpD,OAAO,GAAG,cAAcA,OAAO,CAAC0D,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG;IAAgB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC,eAEThE,OAAA;MAAO2D,SAAS,EAAC,mBAAmB;MAACQ,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAGC,CAAC,IAAK9D,OAAO,CAAC8D,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEhGhE,OAAA;MAAQ2D,SAAS,EAAC,sBAAsB;MAACM,OAAO,EAAEjB,YAAa;MAACwB,QAAQ,EAAE,CAAClE,IAAK;MAAAsD,QAAA,EAAC;IAEjF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEThE,OAAA;MAAQ2D,SAAS,EAAC,2BAA2B;MAACM,OAAO,EAAER,uBAAwB;MAACe,QAAQ,EAAE,CAACxD,SAAU;MAAA4C,QAAA,EAAC;IAEtG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEThE,OAAA;MAAK2D,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAElD;IAAM;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAE/C9C,QAAQ,iBACPlB,OAAA;MAAK2D,SAAS,EAAC,qBAAqB;MAAAC,QAAA,GAAC,sBACpB,eAAA5D,OAAA;QAAGyE,IAAI,EAAE,mCAAmCvD,QAAQ,EAAG;QAACoD,MAAM,EAAC,QAAQ;QAACI,GAAG,EAAC,YAAY;QAAAd,QAAA,EAAC;MAExG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3D,EAAA,CAtHQD,GAAG;AAAAuE,EAAA,GAAHvE,GAAG;AAwHZ,eAAeA,GAAG;AAAC,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}